/*
Network as Code

Manipulate network conditions via simplified REST calls

API version: 2
Contact: todd.levi@nokia.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datarepository

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	clientmodel "github.com/cnshackthon/dscf/model"
)

// Linger please
var (
	_ _context.Context
)

// LocationApiService LocationApi service
type LocationApiService service

type ApiGetSubscriberLocationRequest struct {
	ctx _context.Context
	ApiService *LocationApiService
	subscriberId *clientmodel.SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiGetSubscriberLocationRequest) SubscriberId(subscriberId clientmodel.SubscriberId) ApiGetSubscriberLocationRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiGetSubscriberLocationRequest) XTestmode(xTestmode string) ApiGetSubscriberLocationRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiGetSubscriberLocationRequest) Execute() (clientmodel.LocationResponse, *_nethttp.Response, error) {
	return r.ApiService.GetSubscriberLocationExecute(r)
}

/*
GetSubscriberLocation Get last reported location

Get the last reported location of the subscriber identified by the given ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSubscriberLocationRequest
*/
func (a *LocationApiService) GetSubscriberLocation(ctx _context.Context) ApiGetSubscriberLocationRequest {
	return ApiGetSubscriberLocationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocationResponse
func (a *LocationApiService) GetSubscriberLocationExecute(r ApiGetSubscriberLocationRequest) (clientmodel.LocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  clientmodel.LocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationApiService.GetSubscriberLocation")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/location"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return localVarReturnValue, nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v clientmodel.ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
