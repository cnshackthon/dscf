/*
Network as Code

Manipulate network conditions via simplified REST calls

API version: 2
Contact: todd.levi@nokia.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datarepository

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SubscriberApiService SubscriberApi service
type SubscriberApiService service

type ApiCreateTestUserRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberDetails *SubscriberDetails
	xTestmode *string
}

// Add a new test user
func (r ApiCreateTestUserRequest) SubscriberDetails(subscriberDetails SubscriberDetails) ApiCreateTestUserRequest {
	r.subscriberDetails = &subscriberDetails
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiCreateTestUserRequest) XTestmode(xTestmode string) ApiCreateTestUserRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiCreateTestUserRequest) Execute() (SubscriberDetails, *_nethttp.Response, error) {
	return r.ApiService.CreateTestUserExecute(r)
}

/*
CreateTestUser Create a new test user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTestUserRequest
*/
func (a *SubscriberApiService) CreateTestUser(ctx _context.Context) ApiCreateTestUserRequest {
	return ApiCreateTestUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriberDetails
func (a *SubscriberApiService) CreateTestUserExecute(r ApiCreateTestUserRequest) (SubscriberDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  SubscriberDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.CreateTestUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/testuser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberDetails == nil {
		return localVarReturnValue, nil, reportError("subscriberDetails is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberDetails
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTestuserRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberId *SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiDeleteTestuserRequest) SubscriberId(subscriberId SubscriberId) ApiDeleteTestuserRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiDeleteTestuserRequest) XTestmode(xTestmode string) ApiDeleteTestuserRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiDeleteTestuserRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteTestuserExecute(r)
}

/*
DeleteTestuser Delete an existing test user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteTestuserRequest
*/
func (a *SubscriberApiService) DeleteTestuser(ctx _context.Context) ApiDeleteTestuserRequest {
	return ApiDeleteTestuserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SubscriberApiService) DeleteTestuserExecute(r ApiDeleteTestuserRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.DeleteTestuser")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/testuser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCustomBandwidthRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberId *SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiGetCustomBandwidthRequest) SubscriberId(subscriberId SubscriberId) ApiGetCustomBandwidthRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiGetCustomBandwidthRequest) XTestmode(xTestmode string) ApiGetCustomBandwidthRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiGetCustomBandwidthRequest) Execute() (CustomLimits, *_nethttp.Response, error) {
	return r.ApiService.GetCustomBandwidthExecute(r)
}

/*
GetCustomBandwidth Get upload/download limit

Get the current upload/download bandwidth limits for the subscriber identified by the given ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCustomBandwidthRequest
*/
func (a *SubscriberApiService) GetCustomBandwidth(ctx _context.Context) ApiGetCustomBandwidthRequest {
	return ApiGetCustomBandwidthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLimits
func (a *SubscriberApiService) GetCustomBandwidthExecute(r ApiGetCustomBandwidthRequest) (CustomLimits, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  CustomLimits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.GetCustomBandwidth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/bandwidth/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return localVarReturnValue, nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriberRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberId *SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiGetSubscriberRequest) SubscriberId(subscriberId SubscriberId) ApiGetSubscriberRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiGetSubscriberRequest) XTestmode(xTestmode string) ApiGetSubscriberRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiGetSubscriberRequest) Execute() (SubscriberDetails, *_nethttp.Response, error) {
	return r.ApiService.GetSubscriberExecute(r)
}

/*
GetSubscriber Get the subscriber SUPI/IMSI and MSISDN

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSubscriberRequest
*/
func (a *SubscriberApiService) GetSubscriber(ctx _context.Context) ApiGetSubscriberRequest {
	return ApiGetSubscriberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriberDetails
func (a *SubscriberApiService) GetSubscriberExecute(r ApiGetSubscriberRequest) (SubscriberDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  SubscriberDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.GetSubscriber")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return localVarReturnValue, nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriberBandwidthRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberId *SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiGetSubscriberBandwidthRequest) SubscriberId(subscriberId SubscriberId) ApiGetSubscriberBandwidthRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiGetSubscriberBandwidthRequest) XTestmode(xTestmode string) ApiGetSubscriberBandwidthRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiGetSubscriberBandwidthRequest) Execute() (BandwidthResponse, *_nethttp.Response, error) {
	return r.ApiService.GetSubscriberBandwidthExecute(r)
}

/*
GetSubscriberBandwidth Get the current subscriber bandwidth

Get the bandwidth identifier for the subscriber identified by the given IMSI

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSubscriberBandwidthRequest
*/
func (a *SubscriberApiService) GetSubscriberBandwidth(ctx _context.Context) ApiGetSubscriberBandwidthRequest {
	return ApiGetSubscriberBandwidthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BandwidthResponse
func (a *SubscriberApiService) GetSubscriberBandwidthExecute(r ApiGetSubscriberBandwidthRequest) (BandwidthResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  BandwidthResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.GetSubscriberBandwidth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/bandwidth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return localVarReturnValue, nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriberLocationRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	subscriberId *SubscriberId
	xTestmode *string
}

// External ID of the subscriber
func (r ApiGetSubscriberLocationRequest) SubscriberId(subscriberId SubscriberId) ApiGetSubscriberLocationRequest {
	r.subscriberId = &subscriberId
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiGetSubscriberLocationRequest) XTestmode(xTestmode string) ApiGetSubscriberLocationRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiGetSubscriberLocationRequest) Execute() (LocationResponse, *_nethttp.Response, error) {
	return r.ApiService.GetSubscriberLocationExecute(r)
}

/*
GetSubscriberLocation Get last reported location

Get the last reported location of the subscriber identified by the given ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSubscriberLocationRequest
*/
func (a *SubscriberApiService) GetSubscriberLocation(ctx _context.Context) ApiGetSubscriberLocationRequest {
	return ApiGetSubscriberLocationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocationResponse
func (a *SubscriberApiService) GetSubscriberLocationExecute(r ApiGetSubscriberLocationRequest) (LocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  LocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.GetSubscriberLocation")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/location"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subscriberId == nil {
		return localVarReturnValue, nil, reportError("subscriberId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.subscriberId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomBandwidthRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	customLimits *CustomLimits
	xTestmode *string
}

// New upload/download limits for the subscriber
func (r ApiUpdateCustomBandwidthRequest) CustomLimits(customLimits CustomLimits) ApiUpdateCustomBandwidthRequest {
	r.customLimits = &customLimits
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiUpdateCustomBandwidthRequest) XTestmode(xTestmode string) ApiUpdateCustomBandwidthRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiUpdateCustomBandwidthRequest) Execute() (CustomLimits, *_nethttp.Response, error) {
	return r.ApiService.UpdateCustomBandwidthExecute(r)
}

/*
UpdateCustomBandwidth Set upload limit

Set the upload/download bandwidth limits for the subscriber identified by the given ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateCustomBandwidthRequest
*/
func (a *SubscriberApiService) UpdateCustomBandwidth(ctx _context.Context) ApiUpdateCustomBandwidthRequest {
	return ApiUpdateCustomBandwidthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLimits
func (a *SubscriberApiService) UpdateCustomBandwidthExecute(r ApiUpdateCustomBandwidthRequest) (CustomLimits, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  CustomLimits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.UpdateCustomBandwidth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/bandwidth/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customLimits == nil {
		return localVarReturnValue, nil, reportError("customLimits is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.customLimits
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSubscriberBandwidthRequest struct {
	ctx _context.Context
	ApiService *SubscriberApiService
	bandwidthUpdate *BandwidthUpdate
	xTestmode *string
}

// New bandwidth for subscriber
func (r ApiUpdateSubscriberBandwidthRequest) BandwidthUpdate(bandwidthUpdate BandwidthUpdate) ApiUpdateSubscriberBandwidthRequest {
	r.bandwidthUpdate = &bandwidthUpdate
	return r
}
// Enables test mode when set to \&quot;true\&quot;.  Assumes \&quot;false\&quot; if not present.
func (r ApiUpdateSubscriberBandwidthRequest) XTestmode(xTestmode string) ApiUpdateSubscriberBandwidthRequest {
	r.xTestmode = &xTestmode
	return r
}

func (r ApiUpdateSubscriberBandwidthRequest) Execute() (BandwidthResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateSubscriberBandwidthExecute(r)
}

/*
UpdateSubscriberBandwidth Update the bandwidth of the subscriber

Update the bandwidth identifier for the subscriber identified by the given IMSI

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateSubscriberBandwidthRequest
*/
func (a *SubscriberApiService) UpdateSubscriberBandwidth(ctx _context.Context) ApiUpdateSubscriberBandwidthRequest {
	return ApiUpdateSubscriberBandwidthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BandwidthResponse
func (a *SubscriberApiService) UpdateSubscriberBandwidthExecute(r ApiUpdateSubscriberBandwidthRequest) (BandwidthResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  BandwidthResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberApiService.UpdateSubscriberBandwidth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber/bandwidth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.bandwidthUpdate == nil {
		return localVarReturnValue, nil, reportError("bandwidthUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTestmode != nil {
		localVarHeaderParams["x-testmode"] = parameterToString(*r.xTestmode, "")
	}
	// body params
	localVarPostBody = r.bandwidthUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apigee_apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-apikey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
