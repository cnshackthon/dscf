/*
Network as Code

Manipulate network conditions via simplified REST calls

API version: 2
Contact: todd.levi@nokia.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datarepository

import (
	"encoding/json"
)

// BandwidthUpdate struct for BandwidthUpdate
type BandwidthUpdate struct {
	Id *string `json:"id,omitempty" yaml:"id" bson:"id" mapstructure:"Id"`
	Bandwidth *Bandwidth `json:"bandwidth,omitempty" yaml:"bandwidth" bson:"bandwidth" mapstructure:"Bandwidth"`
}

// NewBandwidthUpdate instantiates a new BandwidthUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthUpdate() *BandwidthUpdate {
	this := BandwidthUpdate{}
	return &this
}

// NewBandwidthUpdateWithDefaults instantiates a new BandwidthUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthUpdateWithDefaults() *BandwidthUpdate {
	this := BandwidthUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BandwidthUpdate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUpdate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BandwidthUpdate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BandwidthUpdate) SetId(v string) {
	o.Id = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *BandwidthUpdate) GetBandwidth() Bandwidth {
	if o == nil || o.Bandwidth == nil {
		var ret Bandwidth
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUpdate) GetBandwidthOk() (*Bandwidth, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *BandwidthUpdate) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given Bandwidth and assigns it to the Bandwidth field.
func (o *BandwidthUpdate) SetBandwidth(v Bandwidth) {
	o.Bandwidth = &v
}

func (o BandwidthUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	return json.Marshal(toSerialize)
}

type NullableBandwidthUpdate struct {
	value *BandwidthUpdate
	isSet bool
}

func (v NullableBandwidthUpdate) Get() *BandwidthUpdate {
	return v.value
}

func (v *NullableBandwidthUpdate) Set(val *BandwidthUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthUpdate(val *BandwidthUpdate) *NullableBandwidthUpdate {
	return &NullableBandwidthUpdate{value: val, isSet: true}
}

func (v NullableBandwidthUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


