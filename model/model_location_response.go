/*
Network as Code

Manipulate network conditions via simplified REST calls

API version: 2
Contact: todd.levi@nokia.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datarepository

import (
	"encoding/json"
	"time"
)

// LocationResponse struct for LocationResponse
type LocationResponse struct {
	EventTime *time.Time `json:"eventTime,omitempty" yaml:"eventTime" bson:"eventTime" mapstructure:"EventTime"`
	Id *string `json:"id,omitempty" yaml:"id" bson:"id" mapstructure:"Id"`
	LocationInfo *LocationDetails `json:"locationInfo,omitempty" yaml:"locationInfo" bson:"locationInfo" mapstructure:"LocationInfo"`
}

// NewLocationResponse instantiates a new LocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationResponse() *LocationResponse {
	this := LocationResponse{}
	return &this
}

// NewLocationResponseWithDefaults instantiates a new LocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationResponseWithDefaults() *LocationResponse {
	this := LocationResponse{}
	return &this
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *LocationResponse) GetEventTime() time.Time {
	if o == nil || o.EventTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationResponse) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || o.EventTime == nil {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *LocationResponse) HasEventTime() bool {
	if o != nil && o.EventTime != nil {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *LocationResponse) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocationResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocationResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LocationResponse) SetId(v string) {
	o.Id = &v
}

// GetLocationInfo returns the LocationInfo field value if set, zero value otherwise.
func (o *LocationResponse) GetLocationInfo() LocationDetails {
	if o == nil || o.LocationInfo == nil {
		var ret LocationDetails
		return ret
	}
	return *o.LocationInfo
}

// GetLocationInfoOk returns a tuple with the LocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationResponse) GetLocationInfoOk() (*LocationDetails, bool) {
	if o == nil || o.LocationInfo == nil {
		return nil, false
	}
	return o.LocationInfo, true
}

// HasLocationInfo returns a boolean if a field has been set.
func (o *LocationResponse) HasLocationInfo() bool {
	if o != nil && o.LocationInfo != nil {
		return true
	}

	return false
}

// SetLocationInfo gets a reference to the given LocationDetails and assigns it to the LocationInfo field.
func (o *LocationResponse) SetLocationInfo(v LocationDetails) {
	o.LocationInfo = &v
}

func (o LocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTime != nil {
		toSerialize["eventTime"] = o.EventTime
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LocationInfo != nil {
		toSerialize["locationInfo"] = o.LocationInfo
	}
	return json.Marshal(toSerialize)
}

type NullableLocationResponse struct {
	value *LocationResponse
	isSet bool
}

func (v NullableLocationResponse) Get() *LocationResponse {
	return v.value
}

func (v *NullableLocationResponse) Set(val *LocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationResponse(val *LocationResponse) *NullableLocationResponse {
	return &NullableLocationResponse{value: val, isSet: true}
}

func (v NullableLocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


