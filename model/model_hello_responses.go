/*
Network as Code

Manipulate network conditions via simplified REST calls

API version: 2
Contact: todd.levi@nokia.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datarepository

import (
	"encoding/json"
)

// HelloResponses struct for HelloResponses
type HelloResponses struct {
	Service *string `json:"service,omitempty" yaml:"service" bson:"service" mapstructure:"Service"`
}

// NewHelloResponses instantiates a new HelloResponses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelloResponses() *HelloResponses {
	this := HelloResponses{}
	return &this
}

// NewHelloResponsesWithDefaults instantiates a new HelloResponses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelloResponsesWithDefaults() *HelloResponses {
	this := HelloResponses{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *HelloResponses) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelloResponses) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *HelloResponses) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *HelloResponses) SetService(v string) {
	o.Service = &v
}

func (o HelloResponses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableHelloResponses struct {
	value *HelloResponses
	isSet bool
}

func (v NullableHelloResponses) Get() *HelloResponses {
	return v.value
}

func (v *NullableHelloResponses) Set(val *HelloResponses) {
	v.value = val
	v.isSet = true
}

func (v NullableHelloResponses) IsSet() bool {
	return v.isSet
}

func (v *NullableHelloResponses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelloResponses(val *HelloResponses) *NullableHelloResponses {
	return &NullableHelloResponses{value: val, isSet: true}
}

func (v NullableHelloResponses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelloResponses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


